name: Build Tailscale GUI DEB Package

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-deb:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          dpkg-dev \
          fakeroot \
          lintian \
          imagemagick \
          python3 \
          python3-dev

    - name: Set package version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="1.0.0-${GITHUB_SHA::7}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Package version: $VERSION"

    - name: Prepare build environment
      run: |
        PACKAGE_NAME="tailscale-gui"
        VERSION="${{ steps.version.outputs.version }}"
        BUILD_DIR="${PACKAGE_NAME}_${VERSION}_all"
        echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
        echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV

        # Remove old build directory if exists
        rm -rf "$BUILD_DIR"

        # Create directory structure
        mkdir -p "$BUILD_DIR/DEBIAN"
        mkdir -p "$BUILD_DIR/usr/bin"
        mkdir -p "$BUILD_DIR/usr/share/applications"
        mkdir -p "$BUILD_DIR/usr/share/icons/hicolor/48x48/apps"
        mkdir -p "$BUILD_DIR/usr/share/icons/hicolor/scalable/apps"
        mkdir -p "$BUILD_DIR/usr/share/$PACKAGE_NAME"
        mkdir -p "$BUILD_DIR/usr/share/doc/$PACKAGE_NAME"

    - name: Create DEBIAN control file
      run: |
        cat > "$BUILD_DIR/DEBIAN/control" << EOF
        Package: $PACKAGE_NAME
        Version: $VERSION
        Section: net
        Priority: optional
        Architecture: all
        Depends: python3 (>= 3.10), python3-pyside6.qtcore, python3-pyside6.qtwidgets, python3-pyside6.qtgui, python3-requests, tailscale, python3-pkg-resources
        Recommends: python3-pyside6.qtnetwork
        Maintainer: Jan Dzias≈Ço <jan@example.com>
        Description: Graficzny interfejs u≈ºytkownika dla Tailscale
         Lekka aplikacja desktopowa (Linux) zapewniajƒÖca podstawowe sterowanie
         Tailscale z nastƒôpujƒÖcymi funkcjami:
          * W≈ÇƒÖczanie/wy≈ÇƒÖczanie po≈ÇƒÖczenia Tailscale
          * ZarzƒÖdzanie exit nodes z prze≈ÇƒÖcznikiem
          * Lista urzƒÖdze≈Ñ z statusem online
          * PodglƒÖd lokalnych i publicznych adres√≥w IP
          * Automatyczne od≈õwie≈ºanie co 5 sekund
          * Ikona w zasobniku systemowym
          * Kopiowanie adres√≥w IP do schowka
          * Ciemny motyw interfejsu
        Homepage: https://github.com/${{ github.repository }}
        EOF

    - name: Create copyright file
      run: |
        cat > "$BUILD_DIR/usr/share/doc/$PACKAGE_NAME/copyright" << EOF
        Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
        Source: https://github.com/${{ github.repository }}

        Files: *
        Copyright: 2025 Jan Dzias≈Ço
        License: MIT
         Permission is hereby granted, free of charge, to any person obtaining a
         copy of this software and associated documentation files (the "Software"),
         to deal in the Software without restriction, including without limitation
         the rights to use, copy, modify, merge, publish, distribute, sublicense,
         and/or sell copies of the Software, and to permit persons to whom the
         Software is furnished to do so, subject to the following conditions:
         .
         The above copyright notice and this permission notice shall be included
         in all copies or substantial portions of the Software.
         .
         THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
         OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
         THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
         FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
         DEALINGS IN THE SOFTWARE.
        EOF

    - name: Create maintainer scripts
      run: |
        # Create postinst script
        cat > "$BUILD_DIR/DEBIAN/postinst" << 'EOF'
        #!/bin/bash
        set -e

        # Set executable permissions
        chmod +x /usr/bin/tailscale-gui

        # Update desktop database
        if command -v update-desktop-database >/dev/null 2>&1; then
            update-desktop-database /usr/share/applications || true
        fi

        # Update icon cache
        if command -v gtk-update-icon-cache >/dev/null 2>&1; then
            gtk-update-icon-cache -q /usr/share/icons/hicolor || true
        fi

        echo "Tailscale GUI has been installed."
        echo "You can run the application from the menu or with: tailscale-gui"

        exit 0
        EOF

        # Create prerm script
        cat > "$BUILD_DIR/DEBIAN/prerm" << 'EOF'
        #!/bin/bash
        set -e
        echo "Removing Tailscale GUI..."
        exit 0
        EOF

        # Create postrm script
        cat > "$BUILD_DIR/DEBIAN/postrm" << 'EOF'
        #!/bin/bash
        set -e

        # Update desktop database
        if command -v update-desktop-database >/dev/null 2>&1; then
            update-desktop-database /usr/share/applications || true
        fi

        # Update icon cache
        if command -v gtk-update-icon-cache >/dev/null 2>&1; then
            gtk-update-icon-cache -q /usr/share/icons/hicolor || true
        fi

        exit 0
        EOF

        # Set permissions
        chmod 755 "$BUILD_DIR/DEBIAN/postinst"
        chmod 755 "$BUILD_DIR/DEBIAN/prerm"
        chmod 755 "$BUILD_DIR/DEBIAN/postrm"

    - name: Create launcher script
      run: |
        cat > "$BUILD_DIR/usr/bin/tailscale-gui" << EOF
        #!/bin/bash
        # Launcher script for Tailscale GUI
        cd /usr/share/$PACKAGE_NAME
        exec python3 main.py "\$@"
        EOF

        chmod 755 "$BUILD_DIR/usr/bin/tailscale-gui"

    - name: Create desktop file
      run: |
        cat > "$BUILD_DIR/usr/share/applications/$PACKAGE_NAME.desktop" << EOF
        [Desktop Entry]
        Type=Application
        Name=Tailscale GUI
        Comment=Graficzny interfejs u≈ºytkownika dla Tailscale
        Comment[en]=Graphical user interface for Tailscale
        GenericName=Network Management
        GenericName[pl]=ZarzƒÖdzanie sieciƒÖ
        Exec=tailscale-gui
        Icon=tailscale-gui
        Terminal=false
        Categories=Network;System;
        StartupNotify=true
        Keywords=tailscale;vpn;network;mesh;
        Keywords[pl]=tailscale;vpn;sieƒá;
        EOF

    - name: Handle icons
      run: |
        PNG_ICON_FOUND=false
        SVG_ICON_FOUND=false

        # Handle PNG icon for system menu
        if [ -f "assets_icon_tailscale.png" ]; then
          echo "‚úÖ Found PNG icon: assets_icon_tailscale.png"
          PNG_ICON_FOUND=true

          # Check if resizing is needed
          if command -v identify >/dev/null 2>&1; then
            SIZE=$(identify -format "%wx%h" "assets_icon_tailscale.png" 2>/dev/null || echo "unknown")
            if [ "$SIZE" != "48x48" ] && [ "$SIZE" != "unknown" ]; then
              echo "üîÑ Resizing PNG icon from $SIZE to 48x48"
              convert "assets_icon_tailscale.png" -resize 48x48 "$BUILD_DIR/usr/share/icons/hicolor/48x48/apps/$PACKAGE_NAME.png"
            else
              echo "‚úÖ PNG icon has correct size (48x48)"
              cp "assets_icon_tailscale.png" "$BUILD_DIR/usr/share/icons/hicolor/48x48/apps/$PACKAGE_NAME.png"
            fi
          else
            cp "assets_icon_tailscale.png" "$BUILD_DIR/usr/share/icons/hicolor/48x48/apps/$PACKAGE_NAME.png"
          fi
        else
          echo "‚ö†Ô∏è PNG icon not found: assets_icon_tailscale.png"
        fi

        # Handle SVG icon for application and system
        if [ -f "assets_icon_tailscale.svg" ]; then
          echo "‚úÖ Found SVG icon: assets_icon_tailscale.svg"
          SVG_ICON_FOUND=true

          # Copy SVG icon to application directory (for program use)
          cp "assets_icon_tailscale.svg" "$BUILD_DIR/usr/share/$PACKAGE_NAME/"
          echo "‚úÖ SVG icon copied to application directory"

          # Copy SVG icon to system icons directory
          cp "assets_icon_tailscale.svg" "$BUILD_DIR/usr/share/icons/hicolor/scalable/apps/$PACKAGE_NAME.svg"
          echo "‚úÖ SVG icon copied to system directory"
        else
          echo "‚ö†Ô∏è SVG icon not found: assets_icon_tailscale.svg"
        fi

        # Fallback - create basic icon if none found
        if [ "$PNG_ICON_FOUND" = "false" ] && [ "$SVG_ICON_FOUND" = "false" ]; then
          echo "‚ö†Ô∏è No icons found - creating basic PNG icon"
          convert -size 48x48 xc:transparent -fill "#4285f4" \
            -draw "roundrectangle 8,8 40,40 8,8" -pointsize 20 \
            -fill white -gravity center -annotate +0+0 "T" \
            "$BUILD_DIR/usr/share/icons/hicolor/48x48/apps/$PACKAGE_NAME.png"
          echo "‚úÖ Created basic PNG icon"
        elif [ "$PNG_ICON_FOUND" = "false" ] && [ "$SVG_ICON_FOUND" = "true" ]; then
          echo "üîÑ Creating PNG from SVG"
          convert -size 48x48 "assets_icon_tailscale.svg" \
            "$BUILD_DIR/usr/share/icons/hicolor/48x48/apps/$PACKAGE_NAME.png"
          echo "‚úÖ Created PNG from SVG"
        fi

    - name: Copy application files
      run: |
        echo "üìÇ Copying application files..."
        cp main.py "$BUILD_DIR/usr/share/$PACKAGE_NAME/"
        cp tailscale_client.py "$BUILD_DIR/usr/share/$PACKAGE_NAME/"
        cp ip_info.py "$BUILD_DIR/usr/share/$PACKAGE_NAME/"
        cp gui.py "$BUILD_DIR/usr/share/$PACKAGE_NAME/"

        # Copy requirements.txt if exists
        if [ -f "requirements.txt" ]; then
          cp requirements.txt "$BUILD_DIR/usr/share/$PACKAGE_NAME/"
          echo "‚úÖ Copied requirements.txt"
        fi

        # Copy README if exists
        if [ -f "README.md" ]; then
          cp README.md "$BUILD_DIR/usr/share/doc/$PACKAGE_NAME/"
          echo "‚úÖ Copied README.md"
        fi

        # Copy additional resource files
        echo "üîç Checking for additional resource files..."
        for resource_file in *.css *.qss *.json *.txt *.conf; do
          if [ -f "$resource_file" ] && [ "$resource_file" != "requirements.txt" ]; then
            cp "$resource_file" "$BUILD_DIR/usr/share/$PACKAGE_NAME/"
            echo "‚úÖ Copied resource: $resource_file"
          fi
        done

    - name: Calculate package size and build
      run: |
        # Calculate installed size
        INSTALLED_SIZE=$(du -sk "$BUILD_DIR" | cut -f1)
        echo "Installed-Size: $INSTALLED_SIZE" >> "$BUILD_DIR/DEBIAN/control"

        # Build package with fakeroot for correct permissions
        echo "üî® Building DEB package..."
        fakeroot dpkg-deb --build "$BUILD_DIR"

        # Show package info
        echo "üì¶ Package built: ${BUILD_DIR}.deb"
        ls -la "${BUILD_DIR}.deb"

    - name: Validate package with lintian
      run: |
        echo "üîç Validating package with lintian..."
        lintian "${BUILD_DIR}.deb" || echo "‚ö†Ô∏è Lintian found some warnings (this is normal)"

    - name: Show package contents
      run: |
        echo "üìã Package contents:"
        dpkg -c "${BUILD_DIR}.deb"
        echo ""
        echo "‚ÑπÔ∏è Package info:"
        dpkg -I "${BUILD_DIR}.deb"

    - name: Upload DEB package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: tailscale-gui-deb-${{ steps.version.outputs.version }}
        path: "*.deb"
        retention-days: 30

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: "*.deb"
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
