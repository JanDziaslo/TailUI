name: Build DEB Package

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-deb:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper build-essential
          pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ -f VERSION ]]; then
            VERSION=$(cat VERSION)
            if [[ $GITHUB_EVENT_NAME != "release" ]]; then
              VERSION="${VERSION}-$(date +%Y%m%d%H%M%S)"
            fi
          else
            VERSION="1.0.0-$(date +%Y%m%d%H%M%S)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Create DEB package structure
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          PACKAGE_NAME="tailscale-gui"
          PACKAGE_DIR="${PACKAGE_NAME}_${VERSION}"
          
          # Create package structure
          mkdir -p ${PACKAGE_DIR}/DEBIAN
          mkdir -p ${PACKAGE_DIR}/usr/share/applications
          mkdir -p ${PACKAGE_DIR}/usr/share/pixmaps
          mkdir -p ${PACKAGE_DIR}/usr/share/${PACKAGE_NAME}
          mkdir -p ${PACKAGE_DIR}/usr/bin
          
          # Copy application files
          cp *.py ${PACKAGE_DIR}/usr/share/${PACKAGE_NAME}/
          # Remove test files from package
          rm -f ${PACKAGE_DIR}/usr/share/${PACKAGE_NAME}/test_*.py
          cp requirements.txt ${PACKAGE_DIR}/usr/share/${PACKAGE_NAME}/
          cp assets_icon_tailscale.svg ${PACKAGE_DIR}/usr/share/pixmaps/tailscale-gui.svg
          
          # Copy documentation
          mkdir -p ${PACKAGE_DIR}/usr/share/doc/${PACKAGE_NAME}
          cp LICENSE ${PACKAGE_DIR}/usr/share/doc/${PACKAGE_NAME}/copyright
          cp README.md ${PACKAGE_DIR}/usr/share/doc/${PACKAGE_NAME}/
          
          # Create wrapper script
          cat > ${PACKAGE_DIR}/usr/bin/tailscale-gui << 'EOF'
          #!/bin/bash
          cd /usr/share/tailscale-gui
          exec python3 main.py "$@"
          EOF
          chmod +x ${PACKAGE_DIR}/usr/bin/tailscale-gui
          
          # Create desktop file
          cat > ${PACKAGE_DIR}/usr/share/applications/tailscale-gui.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=Tailscale GUI
          Comment=Tailscale VPN GUI Manager
          Exec=tailscale-gui
          Icon=tailscale-gui
          Terminal=false
          Categories=Network;
          Keywords=VPN;Tailscale;Network;
          EOF
          
          # Create control file
          cat > ${PACKAGE_DIR}/DEBIAN/control << EOF
          Package: ${PACKAGE_NAME}
          Version: ${VERSION}
          Section: net
          Priority: optional
          Architecture: all
          Depends: python3 (>= 3.10), python3-pip, tailscale
          Recommends: python3-pyside6.qtcore, python3-pyside6.qtwidgets, python3-pyside6.qtgui, python3-requests
          Maintainer: Jan Dziaslo <maintainer@example.com>
          Description: Tailscale GUI Manager
           A lightweight desktop application for managing Tailscale VPN connections.
           Features include connection management, exit node selection, device listing,
           and public IP information display.
          EOF
          
          # Create installation script
          cat > ${PACKAGE_DIR}/DEBIAN/postinst << 'EOF'
          #!/bin/bash
          set -e
          
          # Install Python dependencies - try system packages first, fallback to pip
          if ! python3 -c "import PySide6" 2>/dev/null; then
              if command -v apt-get >/dev/null 2>&1; then
                  apt-get update >/dev/null 2>&1 || true
                  apt-get install -y python3-pyside6.qtcore python3-pyside6.qtwidgets python3-pyside6.qtgui >/dev/null 2>&1 || \
                  pip3 install --break-system-packages PySide6 >/dev/null 2>&1 || true
              else
                  pip3 install --break-system-packages PySide6 >/dev/null 2>&1 || true
              fi
          fi
          
          if ! python3 -c "import requests" 2>/dev/null; then
              if command -v apt-get >/dev/null 2>&1; then
                  apt-get install -y python3-requests >/dev/null 2>&1 || \
                  pip3 install --break-system-packages requests >/dev/null 2>&1 || true
              else
                  pip3 install --break-system-packages requests >/dev/null 2>&1 || true
              fi
          fi
          
          # Update desktop database
          if command -v update-desktop-database >/dev/null 2>&1; then
              update-desktop-database /usr/share/applications || true
          fi
          
          exit 0
          EOF
          chmod +x ${PACKAGE_DIR}/DEBIAN/postinst
          
          # Create removal script
          cat > ${PACKAGE_DIR}/DEBIAN/prerm << 'EOF'
          #!/bin/bash
          set -e
          
          # Nothing to do on removal for now
          exit 0
          EOF
          chmod +x ${PACKAGE_DIR}/DEBIAN/prerm
          
          # Build the package
          dpkg-deb --build ${PACKAGE_DIR}
          
          # Rename to standard name
          mv ${PACKAGE_DIR}.deb ${PACKAGE_NAME}_${VERSION}_all.deb
          
          echo "PACKAGE_FILE=${PACKAGE_NAME}_${VERSION}_all.deb" >> $GITHUB_ENV
          echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_ENV
          
      - name: Upload DEB package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-deb
          path: "*.deb"
          
      - name: Upload to release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: "*.deb"
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}