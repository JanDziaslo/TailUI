name: Build DEB Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub release'
        required: false
        default: 'false'
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fakeroot dpkg-dev lintian
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Get version
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION)
          else
            VERSION="1.0.0"
            echo "Warning: VERSION file not found, using default: $VERSION"
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Update VERSION file
      run: |
        echo "${{ steps.get_version.outputs.version }}" > VERSION
    
    - name: Build DEB package
      run: |
        chmod +x build_deb.sh
        # Auto-answer "y" to cleanup question at end of build script
        echo "y" | ./build_deb.sh
        # Verify package was created
        if [ ! -f *.deb ]; then
          echo "Error: No DEB package was created"
          exit 1
        fi
    
    - name: List built packages
      run: |
        ls -la *.deb || echo "No DEB files found"
    
    - name: Upload DEB package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: deb-package
        path: "*.deb"
        retention-days: 90
    
    - name: Create Release and Upload Asset (on tag push)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: "*.deb"
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## Changes in ${{ github.ref_name }}
          
          Auto-generated release with DEB package.
          
          ### Installation
          ```bash
          # Download the DEB package
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/tailscale-gui_${{ steps.get_version.outputs.version }}_all.deb
          
          # Install
          sudo dpkg -i tailscale-gui_${{ steps.get_version.outputs.version }}_all.deb
          
          # Fix dependencies if needed
          sudo apt-get install -f
          
          # Run
          tailscale-gui
          ```
    
    - name: Create Manual Release
      if: github.event.inputs.create_release == 'true' && !startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: "*.deb"
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          ## Manual Release v${{ steps.get_version.outputs.version }}
          
          Manually triggered release with DEB package.
          
          ### Installation
          ```bash
          # Download the DEB package
          wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.version }}/tailscale-gui_${{ steps.get_version.outputs.version }}_all.deb
          
          # Install
          sudo dpkg -i tailscale-gui_${{ steps.get_version.outputs.version }}_all.deb
          
          # Fix dependencies if needed
          sudo apt-get install -f
          
          # Run
          tailscale-gui
          ```